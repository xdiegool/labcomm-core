#!/usr/bin/python

import re
import sys

def split_match(pattern, multiline):
    def match(s):
        m = re.match(pattern, s)
        if m:
            return m.group(1)
        pass
    return filter(lambda s: s != None, map(match, multiline.split('\n')))
   

if __name__ == '__main__':
    f = open(sys.argv[1])
    sample = []
    for l in map(lambda s: s.strip(), f):
        lang,kind,func,arg,stype = l[1:].split(l[0])
        if lang == 'C' and kind == 'sample':
            sample.append((func, arg, stype))
            pass
        pass
    result = []
    result.extend(split_match('^[^|]*\|(.*)$', """
      |// generated by relay_gen_c.py
      |#include <sys/types.h>
      |#include <sys/stat.h>
      |#include <fcntl.h>
      |#include <labcomm2014.h>
      |#include <labcomm2014_default_error_handler.h>
      |#include <labcomm2014_default_memory.h>
      |#include <labcomm2014_default_scheduler.h>
      |#include <labcomm2014_fd_reader.h>
      |#include <labcomm2014_fd_writer.h>
      |#include "c_code.h"
    """))
    for func,arg,stype in sample:
        result.extend(split_match('^[^|]*\|(.*)$', """
          |void handle_%(func)s(%(arg)s *v, void *context)
          |{
          |  struct labcomm2014_encoder *e = context;
          |  labcomm2014_encode_%(func)s(e%(valargstr)s);
          |}""" % { 'func': func, 'arg': arg, 'valargstr': '' if stype == "void" else', v' }))
        pass
    result.extend(split_match('^[^|]*\|(.*)$', """
      |int main(int argc, char *argv[]) {
      |  struct labcomm2014_encoder *e;
      |  struct labcomm2014_decoder *d;
      |  int in, out;
      |  
      |  if (argc < 3) { return 1; }
      |  in = open(argv[1], O_RDONLY);
      |  if (in < 0) { return 1; }
      |  out = open(argv[2], O_WRONLY);
      |  if (out < 0) { return 1; }
      |  e = labcomm2014_encoder_new(labcomm2014_fd_writer_new(
      |                              labcomm2014_default_memory, out, 1), 
      |                              labcomm2014_default_error_handler,
      |                              labcomm2014_default_memory,
      |                              labcomm2014_default_scheduler);
      |  d = labcomm2014_decoder_new(labcomm2014_fd_reader_new(
      |                              labcomm2014_default_memory, in, 1), 
      |                              labcomm2014_default_error_handler,
      |                              labcomm2014_default_memory,
      |                              labcomm2014_default_scheduler);
    """))
    for func,arg,stype in sample:
        result.extend(split_match('^[^|]*\|(.*)$', """
          |  labcomm2014_encoder_register_%(func)s(e);
          |  labcomm2014_encoder_sample_ref_register(e, labcomm2014_signature_%(func)s);
          |  labcomm2014_decoder_register_%(func)s(d, handle_%(func)s, e);
          |  labcomm2014_decoder_sample_ref_register(d, labcomm2014_signature_%(func)s);
       """ % { 'func': func, 'arg': arg }))
    result.extend(split_match('^[^|]*\|(.*)$', """
      |  labcomm2014_decoder_run(d);
      |  return 0;
      |}
    """))
    print "\n".join(result)
    pass
