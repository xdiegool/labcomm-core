%header {:
  package se.lth.control.labcomm2014.compiler;
  import se.lth.control.labcomm2014.compiler.*;
:};
%embed {:
  public static class SourceError extends Error {
    public SourceError(String msg) {
      super(msg);
    }
  }
  class Events extends Parser.Events {
    public void syntaxError(Symbol token) {
      StringBuffer s = new StringBuffer();
      s.append(token.getLine(token.getStart()) + ", " + token.getColumn(token.getStart()) + "\n");
      s.append("  *** Syntactic error: unexpected token " + Terminals.NAMES[token.getId()]);
      throw new SourceError(s.toString());
        //super.syntaxError(token);
        //throw new RuntimeException(token.getLine(token.getStart()) + ", " +
	// token.getColumn(token.getStart()) + ": Syntax Error");
    }
    public void scannerError(Scanner.Exception e) {
      StringBuffer s = new StringBuffer();
      s.append(e.line + ", " + e.column + "\n");
      s.append("  *** Lexical error: " + e.getMessage());
      throw new SourceError(s.toString());
        //super.scannerError(e);
        //throw new RuntimeException("Unexpected token");
    }

  }

        {
            report = new Events(); // Use error handler in parser
        }
:};

Specification goal =
     /* Empty program */               {: return new Specification(); :}
  |  decl_list.l                       {: return new Specification(l); :}
  ;

List decl_list =
    decl.d                          {: return new List().add(d); :}
  | decl_list.l decl.d              {: return l.add(d); :}
  ;

Decl decl =
    type_decl.t                     {: return t; :}
  | sample_decl.s	            {: return s; :}
  ;

List var_decl_list =
    var_decl.v                      {: return new List().add(v); :}
  | var_decl_list.l var_decl.v      {: return l.add(v); :}
  ;

Annotations annotations = 
    /* empty list */  {: return new Annotations(); :}
  |  annotation_list.l {: return new Annotations(l); :}
  ;

List annotation_list =
    annotation.i                      {: return new List().add(i); :}
  | annotation_list.l annotation.i     {: return l.add(i); :}
  ;

String key = IDENTIFIER;
String stringliteral = IDENTIFIER | QUOTEDSTRING;

Annotation annotation = intention.i | docstring.d;
Annotation intention = LPAREN key.k COLON stringliteral.v RPAREN {: return new Intention(k,v.getBytes()); :};
Annotation docstring = QUOTEDSTRING.s {: return new DocString(s.substring(1,s.length()-1).getBytes()); :};

TypeInstance type_instance =
    annotations.a type.t IDENTIFIER {: return new TypeInstance(t, IDENTIFIER, a); :}
  | annotations.a type.t IDENTIFIER dim_list.d 
    {: return new TypeInstance(new ParseArrayType(t, d), IDENTIFIER, a); :}
  ;

Field var_decl =
    type_instance.t SEMICOLON     {: return new Field(t); :}
  ;

TypeDecl type_decl =
    annotations.a TYPEDEF type_instance.t  SEMICOLON {: return new TypeDecl(t, a); :} ;

SampleDecl sample_decl =
    annotations.a SAMPLE type_instance.t SEMICOLON {: return new SampleDecl(t, a); :} ;

DataType type =
    prim_type.p                     {: return p; :}
  | user_type.u                     {: return u; :}
  | struct_type.s                   {: return s; :}
  | void_type.v                     {: return v; :}
  ;

PrimType prim_type =
    BOOLEAN
      {: return new PrimType(BOOLEAN, ASTNode.LABCOMM_BOOLEAN); :}
  | BYTE
      {: return new PrimType(BYTE, ASTNode.LABCOMM_BYTE); :}
  | SHORT
      {: return new PrimType(SHORT, ASTNode.LABCOMM_SHORT); :}
  | INT
      {: return new PrimType(INT, ASTNode.LABCOMM_INT); :}
  | LONG
      {: return new PrimType(LONG, ASTNode.LABCOMM_LONG); :}
  | FLOAT
      {: return new PrimType(FLOAT, ASTNode.LABCOMM_FLOAT); :}
  | DOUBLE
      {: return new PrimType(DOUBLE, ASTNode.LABCOMM_DOUBLE); :}
  | STRING
      {: return new PrimType(STRING, ASTNode.LABCOMM_STRING); :}
  | SAMPLE
      {: return new PrimType(SAMPLE, ASTNode.LABCOMM_SAMPLE); :}
  ;

UserType user_type =
    IDENTIFIER                      {: return new UserType(IDENTIFIER); :}
  ;

StructType struct_type =
    STRUCT LBRACE var_decl_list.l RBRACE {: return new StructType(l); :}
  ;

VoidType void_type =
    VOID {: return new VoidType(); :}
;

List dim_list =
    dim.d                           {: return new List().add(d); :}
  | dim_list.l  dim.d               {: return l.add(d); :}
  ;

Dim dim =
    LBRACK exp_list.e RBRACK        {: return new Dim(e); :}
  ;

List exp_list =
    exp.e                           {: return new List().add(e); :}
  | exp_list.l COMMA exp.e          {: return l.add(e); :}
  ;

Exp exp =
    INTEGER_LITERAL                 {: return new IntegerLiteral(INTEGER_LITERAL); :}
  | UNDERSCORE                      {: return new VariableSize(); :}
  ;
