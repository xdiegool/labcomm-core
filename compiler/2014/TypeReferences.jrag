aspect User_Types {
  syn String DataType.getTypeName();
  eq DataType.getTypeName() = getClass().getName();
  eq PrimType.getTypeName() = getName();
  eq UserType.getTypeName() = getName();

  syn boolean DataType.isUserType();
  eq DataType.isUserType() = false;
  eq UserType.isUserType() = true;
}

aspect Type_References {
 
  // The dependencies on other type declarations for a Decl.
  coll Set<Decl> Decl.type_dependencies() [new HashSet<Decl>()] with add;

  Field contributes ((UserType)getDataType()).decl()   
  when parentDecl() != null && getDataType().isUserType()
  to Decl.type_dependencies() 
  for parentDecl();

  UserType contributes decl()   
  when parentDecl() != null 
  to Decl.type_dependencies() 
  for parentDecl();
  /*
  Field contributes getDataType().decl()   
  when parentDecl() != null && getDataType().isLeafType()
  to Decl.type_dependencies() 
  for parentDecl();
  */


  // The references from other type declarations to a Decl.
  coll Set<Decl> Decl.type_references() [new HashSet<Decl>()] with add;

  Decl contributes this
  to Decl.type_references()
  for each type_dependencies();

  syn boolean Decl.hasDependencies();
  eq Decl.hasDependencies() = !type_dependencies().isEmpty();

  syn boolean Decl.isReferenced();
  eq Decl.isReferenced() = !type_references().isEmpty();
}
