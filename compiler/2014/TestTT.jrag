import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.STGroupDir;
import org.stringtemplate.v4.STGroupFile;

import java.util.LinkedList;
import java.util.Map;


aspect TestTT {
    syn String ASTNode.getTypeName() = "";
    eq Decl.getTypeName() = getType().getTypeName();
    eq Field.getTypeName() = getType().getTypeName();

    void Program.template_gen(String filename, Map<String,String> opts) throws IOException {
        System.out.println("Generating output from template "+filename);

        STGroup group = new STGroupFile(filename, '$', '$');
        ST st = group.getInstanceOf("program");
        for(String opt: opts.keySet()) {
            st.addAggr("opts.{key,val}", opt, opts.get(opt));
            st.add(opt, opts.get(opt));
        }
        for(Decl d: getDecls()) {
            st.add("decls",d);
        }
        System.out.println(st.render());
    }

    //These are needed as the JastAdd List is not deemed iterable
    //by StringTemplate

    syn LinkedList<Exp> ASTNode.getArrayDims() = null;
    eq Field.getArrayDims() = getType().getArrayDims();
    eq ArrayType.getArrayDims() {
        LinkedList<Exp> result = new LinkedList<Exp>();
        for(Exp e : getExps()) {
           result.add(e); 
        }
        return result;
    }
    syn LinkedList<Field> StructType.getTTFields() {
        LinkedList<Field> result = new LinkedList<Field>();
        for(Field f : getFields()) {
           result.add(f); 
        }
        return result;
    }
    syn LinkedList<SignatureLine> SignatureList.getTTFields() {
        LinkedList<SignatureLine> result = new LinkedList<SignatureLine>();
        for(SignatureLine l : getSignatureLines()) {
           result.add(l); 
        }
        return result;
    }
}

aspect testTTPretty {
    syn String Exp.getTTString() = "";
    eq IntegerLiteral.getTTString() = getValue();
    eq VariableSize.getTTString() = "_";

    syn String ASTNode.getTemplateType() = getClass().getName();
    eq PrimType.getTemplateType() = "PrimType";
    eq VoidType.getTemplateType() = "VoidType";
    eq UserType.getTemplateType() = "UserType";

    eq StructType.getTemplateType() = "StructType";
    eq ArrayType.getTemplateType() =  "ArrayType";
    eq Field.getTemplateType() =  "Field";

    eq TypeDecl.getTemplateType() =  "TypeDecl";
}
aspect testTTSig {
    syn Decl UserType.getTypeDecl() = decl();

    syn String Exp.getEncoding();
    eq IntegerLiteral.getEncoding() = getValue();
    eq VariableSize.getEncoding() = "0";
}
