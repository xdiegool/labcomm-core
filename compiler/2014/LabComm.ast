Specification ::= Decl*;

abstract Decl ::= TypeInstance /Signature/;

TypeDecl   : Decl;
SampleDecl : Decl;

//Signatures are in the abstract grammar, so that
//they can be extended and refined by aspects.

Signature                 ::= SignatureList FlatSignatureList:SignatureList; 
SignatureList             ::= SignatureLine*;
abstract SignatureLine 	  ::= <Indent:int> <Comment:String>; 
abstract DataSignatureLine : SignatureLine;
ByteArraySignatureLine     : DataSignatureLine ::= <Data:byte[]>;
IntSignatureLine           : DataSignatureLine ::= <Data:int>;
StringSignatureLine        : DataSignatureLine ::= <Data:String>;
TypeRefSignatureLine       : SignatureLine     ::= Decl;

Annotation ::= <Key:String> <Value:String>;

Intention : Annotation;
DocString : Annotation;

TypeInstance ::= DataType <Name:String> Annotation*;

Field : TypeInstance;

abstract DataType;
VoidType           : DataType;
//SampleRefType      : DataType;
PrimType           : DataType ::= <Name:String> <Token:int>;
UserType           : DataType ::= <Name:String>;
StructType         : DataType ::= Field*;
ParseArrayType     : DataType ::= DataType Dim*;
abstract ArrayType : DataType ::= DataType Exp*;
VariableArrayType  : ArrayType;
FixedArrayType     : ArrayType;

Dim ::= Exp*;

abstract Exp;
IntegerLiteral : Exp ::= <Value:String>;
VariableSize   : Exp;
