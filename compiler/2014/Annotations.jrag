aspect Annotations {
    syn boolean TypeInstance.hasAnnotations() = getAnnotations().getNumAnnotation()>0;
    syn boolean TypeInstance.hasIntentions() = ! intentionSet().isEmpty();

    syn String Annotations.getName() = new String(lookup(""));

    syn byte[] Annotations.lookup(String key) {
        for(Annotation a: getAnnotations()) {
            byte[] res = a.lookup(key);
            if(res != null) return res;
        }
        return null;
    }

    syn byte[] Annotation.lookup(String key) = (getKey().equals(key) ? getValue() : null);

    syn boolean Annotation.isIntention() = false;
    eq Intention.isIntention() = true;

    inh TypeInstance Annotation.parentInstance();
    eq TypeInstance.getAnnotations().parentInstance() = this;

    coll Set<Intention> TypeInstance.intentionSet() [new HashSet<Intention>()] with add;
    Intention contributes this
        to TypeInstance.intentionSet()
        for parentInstance();

}

aspect SigAnnotations {

   inh Decl TypeInstance.parentDecl();

   coll Set Decl.allAnnotations() [new HashSet()] with add;
   TypeInstance contributes getAnnotationString()
           to Decl.allAnnotations()
           for parentDecl();

   // Helper attribute to get the "outermost" intentions for Decls

   syn byte[] TypeInstance.intentionBytes() = getIntentionBytes(sortedIntentions());
   syn byte[] Decl.getIntentionBytes() = getTypeInstance().intentionBytes();

    static Comparator TypeInstance.intentionComp =
        new Comparator<Intention>() {
            public int compare(Intention i1, Intention i2) {
                    return i1.getKey().compareTo(i2.getKey());
            }
    };

   syn List<Intention> TypeInstance.sortedIntentions() {
       List<Intention> res = new List<Intention>();

       //TODO: refactor out creation of sorted list of intentions

       java.util.ArrayList<Intention> sorted = new ArrayList(intentionSet());
       java.util.Collections.sort(sorted, intentionComp);
       for(Intention i : sorted) {
           res.add(i);
       }
       return res;
   }


   public DocString.DocString(byte[] bs) {
           super("DOCSTRING", bs);
   }

   public DocString.DocString(String s) {
           super("DOCSTRING", s.getBytes());
   }

   public String Intention.toString() {
       return "("+getKey() + ":"+new String(getValue())+")";
   }
   public String  DocString.toString() {
           return "\""+new String(getValue())+"\"";
   }

    /// TESTING
    syn String Decl.getAnnotationString()  {
            StringBuilder sb = new StringBuilder();
            Iterator<String> iti = allAnnotations().iterator();
            while(iti.hasNext()) {
                    //Annotation i = iti.next();
                    //sb.append("("+i.getKey()+" : "+i.getValue()+") ");
                    String i = iti.next();
                    sb.append(i);
            }
            return sb.toString();
    }


    syn int TypeInstance.fooHash() {
            List<Annotation> ints = getAnnotations().getAnnotationList();
            int result=0;
            for(Annotation i : ints) {
                    if(i.isIntention()) {
                        result += i.toString().hashCode();
                    }
            }
            return result;
    }

    syn String TypeInstance.getAnnotationString() {
            StringBuilder sb = new StringBuilder();
            List<Annotation> ints = getAnnotations().getAnnotationList();
            for(Annotation i : ints) {
                    sb.append(i.toString());
            }
            return sb.toString();
    }

    public void Decl.debugAnnotations() {
            getTypeInstance().debugAnnotations(getName());
    }

    public void TypeInstance.debugAnnotations(String context) {
            if(hasAnnotations()){
                System.out.println(context+".annotations: " + fooHash() + " : " + getAnnotationString());
            } else {
                //System.out.println(context + " : " + fooHash() + " : " + ": NO ANNOTATIONS ");
            }
    }
    //  TESTING END

}

